2 APPROACHES--------------------------------------------------------------------------------------->MAP AND WITHOUT MAP
class Solution {
public:
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder){
    
        
        map<int, int> inMap;
        
        
        for(int i = 0; i < inorder.size(); i++){
            inMap[inorder[i]] = i;
        }
        
       
        TreeNode* root = buildTree(inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1, inMap);
        
        return root;
    }

private:
   
    TreeNode* buildTree(vector<int>& inorder, int inStart, int inEnd, 
            vector<int>& postorder, int postStart, int postEnd, map<int, int>& inMap){
                
                if(postStart > postEnd || inStart > inEnd){
                    return NULL;
                }
                
              
                TreeNode* root = new TreeNode(postorder[postEnd]);
                
               
                int inRoot = inMap[root->val];
                
                
                int numsLeft = inRoot - inStart;
                
               
                root->left = buildTree( inorder, inStart, inRoot - 1,postorder, postStart, postStart + numsLeft -1, inMap);
                
               
                root->right = buildTree( inorder, inRoot + 1, inEnd, postorder, postStart + numsLeft , postEnd -1, inMap);
                
                
                return root;
            }
};

------------------------------------------------------------------------------------------------------------------------------------->

class Solution {
public:
    TreeNode *Tree(vector<int>& in, int x, int y,vector<int>& po,int a,int b){
        if(x > y || a > b)return nullptr;
        TreeNode *node = new TreeNode(po[b]);
        int SI = x;  
        while(node->val != in[SI])SI++;
        node->left  = Tree(in,x,SI-1,po,a,a+SI-x-1);
        node->right = Tree(in,SI+1,y,po,a+SI-x,b-1);
        return node;
    }
    TreeNode* buildTree(vector<int>& in, vector<int>& po){
        return Tree(in,0,in.size()-1,po,0,po.size()-1);
    }
};
