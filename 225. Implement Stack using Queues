Using 1 QUEUE--------------------------------------------------------------------------->
class MyStack {
public:
    queue<int> q1; // Primary queue to hold stack elements
// Constructor
    MyStack() {} 
    void push(int x) {    // Pushes an element onto the stack
        int s = q1.size();
        q1.push(x); 
        for(int i = 1; i <= s; ++i) {
            q1.push(q1.front());
            q1.pop();
        }      
    }
    // Removes and returns the top element of the stack
    int pop() {
        int x = q1.front();
        q1.pop();
        return x;               
    } 
    // Returns the top element of the stack without removing it
    int top() {
        return q1.front();        
    } 
    // Checks if the stack is empty
    bool empty() {
        return q1.empty();
    }
};
using 2 queue---------------------------------------------------------------------------->
#include <queue>
using namespace std;

class MyStack {
public:
    MyStack() {
        // No need to do anything here, queues will be initialized empty
    }
    
    // Push element x onto stack
    void push(int x) {
        // Push the element into queue1
        queue1.push(x);
    }
    
    // Removes the element on top of the stack and returns it
    int pop() {
        // Transfer all elements except the last one from queue1 to queue2
        while (queue1.size() > 1) {
            queue2.push(queue1.front());
            queue1.pop();
        }
        
        // The last element in queue1 is the top of the stack
        int top = queue1.front();
        queue1.pop();
        
        // Swap queue1 and queue2
        swap(queue1, queue2);
        
        return top;
    }
    
    // Get the top element
    int top() {
        // Transfer all elements except the last one from queue1 to queue2
        while (queue1.size() > 1) {
            queue2.push(queue1.front());
            queue1.pop();
        }
        
        // The last element in queue1 is the top of the stack
        int top = queue1.front();
        
        // Move the element to queue2 after checking it
        queue2.push(queue1.front());
        queue1.pop();
        
        // Swap queue1 and queue2
        swap(queue1, queue2);
        
        return top;
    }
    
    // Returns whether the stack is empty
    bool empty() {
        return queue1.empty();
    }

private:
    queue<int> queue1;  // The main queue to simulate the stack
    queue<int> queue2;  // Temporary queue to help with pop and top
};
