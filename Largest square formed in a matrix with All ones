Time Complexity:
The time complexity is O(m * n), where m is the number of rows and n is the number of columns in the matrix. This is because we are iterating over each element of the matrix and performing constant time operations for each element.
Space Complexity:
The space complexity is O(m * n) due to the dp table used to store intermediate results.
---------------------------------------------------------------------------------------------------------------------------------------------->
class Solution {
  public:
    int maxSquare(vector<vector<int>>& mat) { 
        int m = mat.size();
        int n = mat[0].size();

        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        
        int ans = 0; 
        
        for (int i = 1; i <= m; i++) {  
            for (int j = 1; j <= n; j++) {  
                if (mat[i-1][j-1] == 1) { 
                    dp[i][j] = 1 + min({dp[i-1][j], dp[i][j-1], dp[i-1][j-1]});
                    ans = max(ans, dp[i][j]);
                }
            }
        }
        
        return ans;
    }
};
