//2 Approaches

class Solution {
public:
    int candy(vector<int>& ratings) {
           int n=ratings.size();
        vector<int> candies(n,1);
  for(int i=1;i< ratings.size();i++){
                    if(ratings[i]>ratings[i-1]){
                        candies[i]=candies[i-1]+1;
                    }
           }
 for(int i=n-2;i>=0;i--){
                    if(ratings[i]>ratings[i+1]){
                        candies[i]=max(candies[i],candies[i+1]+1);
                    }     }

int tot=0;
for(int c:candies){
    tot+=c;

}
 return tot;
    }
};

---------------------------------------------------------------------------->O(n)
class Solution {
public:
    int candy(vector<int>& ratings) {
        int n=ratings.size();
        int tot_candies=n,i=1;
        while(i<n){
            if(ratings[i]==ratings[i-1]){
                i++;
                continue;
            }
            int curr_peak=0;
            while(i<n && ratings[i]>ratings[i-1]){
                         curr_peak++;
                         tot_candies+=curr_peak;
                         i++;
            }
            if(i==n){
               return tot_candies;
            }
            int curr_valley=0;

            while(i<n && ratings[i]<ratings[i-1]){
                curr_valley++;
                tot_candies+=curr_valley;
                i++;

            }

tot_candies-=min(curr_peak,curr_valley);

        }
         
return tot_candies;

    }
};


