<------------------------------------------------------------------2 approaches: using vector<string>------------------------------------------------------------------->O(n) BEST SOLUTION...
class Solution {
public:
    string convert(string s, int numRows) {
        if (numRows == 1)
            return s;
        
        vector<string> rows(numRows);
        bool moveDown = true;
        int rowIdx = 0;
        
        for (auto &ch : s) {
            rows[rowIdx] += ch;
            
            if (rowIdx == numRows - 1)
                moveDown = false;
            else if (rowIdx == 0)
                moveDown = true;

            rowIdx += (moveDown ? 1 : -1);
        }

        string ret = "";
        for (int i = 0; i < numRows; ++i)
            ret += rows[i];
        
        return ret;
    }
};
<----------------------------------------------------------------------------------------------------using vector<vector<char>>-------------------------------------------------------------------->
class Solution {
public:
    string convert(string s, int n) {
        if(s.size()<n || n==1){
            return s;
        }
        int ind=0,d=1;
        vector<vector<char>> ans(n);
        for(char c:s){
            ans[ind].push_back(c);
            if(ind==0){
                d=1;
            }
            else if(ind==n-1){
                d=-1;
            }
            ind+=d;
        }
        string res="";
        for(int i=0;i<ans.size();i++){
            res+=string(ans[i].begin(), ans[i].end());
        }

            
        }
        return res;
    }
};
